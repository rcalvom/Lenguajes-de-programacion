g++ -ISyntactic_Analyzer/libs/deterministic_finite_automaton -ISyntactic_Analyzer/libs/grammar -ISyntactic_Analyzer/libs/lexical_analyzer -ISyntactic_Analyzer/libs/syntactic_Analyzer Syntactic_Analyzer/libs/grammar/grammar.cpp Syntactic_Analyzer/libs/grammar/production_rule.cpp Syntactic_Analyzer/test/test.cpp -o Syntactic_Analyzer/build/test
S	-->	Global	Main	Global	$	
Global	-->	estructura	token_identificador	Sentencia_Estructura	fin_estructura	Global		
Global	-->	funcion	Tipo	token_identificador	(	Param_Funcion	)	hacer	Sentencia	fin_funcion	Global		
Global	-->	Declaracion	Global		
Global	-->		
Main	-->	funcion_principal	Sentencia	fin_principal	
Sentencia_Estructura	-->	Declaracion	Sentencia_Estructura	
Sentencia_Estructura	-->		
Sentencia	-->	Condicional	Sentencia		
Sentencia	-->	Ciclo	Sentencia		
Sentencia	-->	Llamado_Funcion	Sentencia		
Sentencia	-->	Leer	Sentencia		
Sentencia	-->	Imprimir	Sentencia		
Sentencia	-->	Declaracion	Sentencia		
Sentencia	-->	Asignacion	Sentencia		
Sentencia	-->	Romper	Sentencia	
Sentencia	-->	Retornar	Sentencia	
Sentencia	-->		
Condicional	-->	si	(	Valor	)	entonces	Sentencia	Si_No	fin_si	
Si_No	-->	si_no	Sentencia	
Si_No	-->		
Condicional	-->	seleccionar	(	Identificador	)	entre	Caso	fin_seleccionar	
Caso	-->	caso	Valor	:	Sentencia	Caso	
Caso	-->	defecto	:	Sentencia	Caso	
Caso	-->		
Ciclo	-->	para	(	Tipo	identificador	=	Valor	;	Valor	;	Valor	)	hacer	Sentencia	fin_para	
Ciclo	-->	hacer	Sentencia	mientras	(	Valor	)	;	
Ciclo	-->	mientras	(	Valor	)	hacer	Sentencia	fin_mientras	
Llamado_Funcion	-->	token_identificador	(	Parametro	)	;	
Leer	-->	leer	(	Identificador	)	;	
Imprimir	-->	imprimir	(	Imprimir’	)	;		
Imprimir’	-->	Valor	Imprimir’’	
Imprimir’’	-->	,	Valor	Imprimir’’	
Imprimir’’	-->		
Declaracion	-->	Tipo	token_identificador	Declaracion’	;	
Declaracion’	-->	Declaracion’’		
Declaracion’	-->	=	Valor	Declaracion’’		
Declaracion’’	-->	,	token_identificador	Declaración’	
Declaracion’’	-->		
Asignacion	-->	Identificador	=	Valor	;		
Retorno	-->	retornar	Valor	;	
Romper	-->	romper	;		
Param_Funcion	-->	Tipo	token_identificador	Param_Funcion’	
Param_Funcion’	-->	,	Tipo	token_identificador	Param_Funcion’	
Param_Funcion’	-->		
Parametro	-->	Identificador	Parametro’	
Parametro’	-->	,	Identificador	Parametro’		
Parametro’	-->		
Valor	-->	token_real	Valor’	
Valor	-->	token_entero	Valor’	
Valor	-->	falso	Valor’	
Valor	-->	verdadero	Valor’	
Valor	-->	token_cadena	Valor’	
Valor	-->	token_caracter	Valor’	
Valor	-->	token_identificador	Valor’	
Valor	-->	Llamado_Funcion	Valor’	
Valor	-->	(	Valor	)	Valor’	
Valor	-->	Operador_unitario	Valor	Valor’	
Valor	-->	Valor	Operador_binario	Valor		
Valor’	-->	Operador_binario	Valor	Valor’	
Valor’	-->		
Operador_binario	-->	+	
Operador_binario	-->	-	
Operador_binario	-->	*	
Operador_binario	-->	/	
Operador_binario	-->	%	
Operador_binario	-->	&&	
Operador_binario	-->	||	
Operador_binario	-->	>	
Operador_binario	-->	>=	
Operador_binario	-->	<	
Operador_binario	-->	<=	
Operador_binario	-->	==	
Operador_binario	-->	!=	
Operador_unitario	-->	+	
Operador_unitario	-->	-	
Operador_unitario	-->	!	
Tipo	-->	entero		
Tipo	-->	real	
Tipo	-->	booleano	
Tipo	-->	cadena	
Tipo	-->	caracter	
Tipo	-->	token_identificador	
Identificador	-->	token_identificador	Identificador’	
Identificador’	-->	.	token_identificador	Identificador’	
Identificador’	-->		

